name: ATProto ETL Pipeline

on:
  # Triggered by Google Cloud Scheduler for reliable scheduling
  workflow_dispatch:

jobs:
  etl:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Need full history for proper git operations
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Set up Google Cloud credentials
        env:
          BIGQUERY_CREDENTIALS_JSON: ${{ secrets.BIGQUERY_CREDENTIALS_JSON }}
        run: |
          echo "$BIGQUERY_CREDENTIALS_JSON" > /tmp/gcp-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json" >> $GITHUB_ENV
      
      - name: Run ETL Pipeline
        env:
          BLUESKY_USERNAME: ${{ secrets.BLUESKY_USERNAME }}
          BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
          BIGQUERY_CREDENTIALS_JSON: ${{ secrets.BIGQUERY_CREDENTIALS_JSON }}
          BIGQUERY_PROJECT_ID: ${{ secrets.BIGQUERY_PROJECT_ID }}
          BIGQUERY_DATASET_ID: ${{ secrets.BIGQUERY_DATASET_ID }}
          BIGQUERY_TABLE_ID_POSTS: ${{ secrets.BIGQUERY_TABLE_ID_POSTS }}
          BIGQUERY_TABLE_ID_DENSITY: ${{ secrets.BIGQUERY_TABLE_ID_DENSITY }}
        run: |
          python main.py
      
      - name: Configure Git
        run: |
          git config user.name "ATProto ETL Bot"
          git config user.email "etl-bot@github-actions.noreply.com"
      
      - name: Commit and push data updates
        run: |
          # Add only the data files that were updated
          git add data/density_data.json data/posts.json data/last_update.json
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Create commit with timestamp
            TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
            git commit -m "Update visualization data - $TIMESTAMP

            ðŸ¤– Generated by GitHub Actions ETL Pipeline"
            
            # Push changes
            git push
            
            echo "Successfully updated visualization data"
          fi
      
      - name: Clean up credentials
        if: always()
        run: |
          rm -f /tmp/gcp-key.json